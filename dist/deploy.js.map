{"version":3,"sources":["deploy.js"],"names":["_defaultInitScript","join","Deploy","args","mandatoryFields","fd","hdlUtil","getDeepVal","Error","leafFolderName","destFolderPath","initScript","Q","resolve","author","promise","rsv","rej","rst","regex2","RegExp","replace","regex","filePath","fs","existsSync","unlink","err","console","error","folerPath","rmdir","recursive","log","date2string","Date","folderPath","options","_L","endsWith","Path","sep","slice","length","zipPath","trim","code","srcFolderPath","modifiedHours","servers","privateKeyPath","host","port","username","password","_this","recur","feed","tmpFolderPath","localBashFilePath","qAll","push","removeFilePromise","removeFolderPromise","task","Object","assign","shift","preparedZipPath","preparedTmpFolderPath","exec2","then","params","lastSlashIdx","lastIndexOf","zipFileName","parentFolderPath","destPathSep","indexOf","parentDestFolderPath","destFilePath","__dirname","toPrint","rsvRoot","rejRoot","oType","fsUtil","copyFilteredFilesPromise","thePath","zipFolderHandler","reject","msg","readFile","ssh","NodeSSH","sshOptions","privateKey","sshOptionsCopy","connect","putFile","getInitScriptPromise","writeFile","encoding","mode","flag","remoteBashFilePath","execCommand","cwd","dispose","done","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable arrow-parens */\nimport Path from 'path'\nimport fs from 'fs'\nimport Q from 'q';\nimport zipFolder from 'zip-folder';\nimport _L from 'lodash';\nimport hdlUtil from './helpers/hdlUtil';\nimport fsUtil from './helpers/fsUtil';\nimport { NodeSSH } from 'node-ssh'\n\nconst _defaultInitScript = [\n    '#!/bin/bash',\n    '# author: WangFan',\n    '# description: backup server directory',\n    'time1=$(date +\"%Y-%m-%dT%H-%M-%S\")',\n    'str1=\\'server.\\'',\n    'str2=\\'改前.tar.gz\\'',\n    'time2=$str1$time1$str2',\n    'tar -czvf $time2 server &&',\n    'unzip -o server.zip -d ${destFolderPath} &&',\n    'sleep 2 &&',\n    'rm -f server.zip &',\n    'nohup forever stop index.js &',\n    'forever start -o nohup.out -e nohup.out index.js'\n    ].join('\\n');\n\nclass Deploy {\n    constructor (args = {}) {\n        const mandatoryFields = ['author', 'srcFolderPath']; // 'destFolderPath', 'host', 'username'\n        // const mandatoryOneFields = ['privateKeyPath', 'password']\n        // const optionalFields = ['initScript', modifiedHours];\n        for(let fd of mandatoryFields){\n            if(!hdlUtil.getDeepVal(args, fd)){\n                throw new Error(`mandatory field \"${fd}\" is missing`);\n            }\n        }\n        /* let isMandatoryOneOk = false; // 二选一\n        for(let fd of mandatoryOneFields){\n            if(hdlUtil.getDeepVal(args, fd)){\n                isMandatoryOneOk = true;\n                break;\n            }\n        }\n        if(!isMandatoryOneOk){\n            throw new Error(`mandatory field \"privateKeyPath / password\" is missing`);\n        } */\n        this.args = args;\n    }\n\n    getInitScriptPromise ({leafFolderName, destFolderPath}) {\n        if ( this.args.initScript ) {\n            return Q.resolve(this.args.initScript);\n        }\n        // const destFolderPath = this.args.destFolderPath;\n        const author = this.args.author;\n        return Q.promise((rsv, rej) => {\n            /* const bashFilePath = Path.resolve(__dirname, 'helpers/backupServer.sh');\n            fs.readFile(bashFilePath, 'utf8', (err, rst) => {\n                if (err) {\n                    return rej(err);\n                } */\n                let rst = _defaultInitScript;\n                if(author){\n                    const regex2 = new RegExp('改前');\n                    rst = rst.replace(regex2, `.${author}.backup`);\n                }\n                rst = rst.replace(/\\$\\{destFolderPath\\}/g, destFolderPath);\n                if(!leafFolderName || leafFolderName === 'server'){\n                    return rsv(rst);\n                }else{\n                    const regex = new RegExp('server', 'g');\n                    rst = rst.replace(regex, leafFolderName);\n                    rsv(rst);\n                }\n            // })\n        })\n    }\n\n    removeFilePromise (filePath) {\n        return Q.promise((rsv/* , rej */) => {\n            // eslint-disable-next-line no-sync\n            if (!fs.existsSync(filePath)) {\n                return rsv(`removeFilePromise #111 not found: ${filePath}`);\n            }\n            fs.unlink(filePath, function (err) {\n                if (err) {\n                    console.error('removefilePromise #27', err);\n                }\n                rsv(filePath);\n            });\n        })\n    }\n\n    removeFolderPromise (folerPath) {\n        return Q.promise((rsv, rej) => {\n            // delete directory recursively\n            fs.rmdir(folerPath, { recursive: true }, (err) => {\n                if (err) {\n                    console.error(`fail to delete ${folerPath}, ERROR:`, err);\n                    rej(err);\n                }else{\n                    console.log(hdlUtil.date2string(new Date(), 'ms'), `#268 ${folerPath} is deleted!`);\n                    rsv(null);\n                }\n            });\n        })\n    }\n    \n    /** \n     * @param {String} folderPath the path of folder to be zipped\n     * @param {String} options options.deleteFolder Y 压缩后删除文件 \n     * @returns {String} zipPath\n     * */\n    zipFolderHandler (folderPath, options = {}) {\n        if (_L.endsWith(folderPath, Path.sep)) {\n            folderPath = folderPath.slice(0, folderPath.length - 1);\n        }\n        const zipPath = _L.trim(hdlUtil.getDeepVal(options, 'zipPath') || `${folderPath}.zip`);\n        return Q.promise(function (rsv, rej) {\n            // eslint-disable-next-line no-sync\n            if (!fs.existsSync(folderPath)) {\n                return rsv({ code: 113 });\n            }\n            zipFolder(folderPath, zipPath, err => {\n                if (err) {\n                    rej(err)\n                } else {\n                    rsv({ code: 111, zipPath });\n                }\n            });\n        });\n    }\n\n    exec () {\n        const { srcFolderPath, modifiedHours } = this.args;\n        let servers = this.args.servers;\n        if(!servers){\n            const {destFolderPath, privateKeyPath, host, port, username, password} = this.args;\n            servers = [{destFolderPath, privateKeyPath, host, port, username, password}];\n        }\n        const _this = this;\n        const recur = (feed = {}) => {\n            const {tmpFolderPath, localBashFilePath, zipPath} = feed;\n            if(servers.length < 1){\n                const qAll = [];\n                qAll.push( this.removeFilePromise(zipPath) );\n                qAll.push( this.removeFilePromise(localBashFilePath) );\n                qAll.push( this.removeFolderPromise(tmpFolderPath) );\n                return;\n            }\n            const task = Object.assign({}, servers.shift(), {srcFolderPath, modifiedHours});\n            if(zipPath){\n                task.preparedZipPath = zipPath;\n                task.preparedTmpFolderPath = tmpFolderPath;\n            }\n            _this.exec2(task).then(recur);\n        }\n        recur();\n    }\n\n    exec2 (params = {}) {\n        const { srcFolderPath, modifiedHours, destFolderPath, privateKeyPath, host, port = 22, username, password } = params;\n        const preparedZipPath = params.preparedZipPath; // 同一批部署，不重复制作压缩包\n        const preparedTmpFolderPath = params.preparedTmpFolderPath; // 同一批部署，不重复制作压缩包\n        let tmpFolderPath; // if modifiedHours, copy selected files to ${tmpFolderPath} first\n        let lastSlashIdx = srcFolderPath.lastIndexOf(Path.sep);\n        if (lastSlashIdx === srcFolderPath.length - 1) {\n            lastSlashIdx = srcFolderPath.slice(0, -1).lastIndexOf(Path.sep);\n        }\n\n        let leafFolderName = srcFolderPath.slice(lastSlashIdx + 1);\n        if(hdlUtil.endsWith(leafFolderName, Path.sep)){\n            leafFolderName = leafFolderName.slice(0, leafFolderName.length - 1);\n        }\n        const zipFileName = `${leafFolderName}.zip`;\n\n        const parentFolderPath = srcFolderPath.slice(0, lastSlashIdx);\n        const zipPath = Path.resolve(parentFolderPath, zipFileName);\n\n        let destPathSep;\n        if(destFolderPath.indexOf('/') !== 0 || destFolderPath.slice(0, 4).indexOf(':') > 0){\n            destPathSep = '\\\\';\n        }else{\n            destPathSep = '/';\n        }\n        lastSlashIdx = destFolderPath.lastIndexOf(destPathSep);\n        if (lastSlashIdx === destFolderPath.length - 1) {\n            lastSlashIdx = destFolderPath.slice(0, -1).lastIndexOf(destPathSep);\n        }\n        const parentDestFolderPath = destFolderPath.slice(0, lastSlashIdx);\n        const destFilePath = `${parentDestFolderPath}${destPathSep}${zipFileName}`; // Path.resolve(parentDestFolderPath, zipFileName);\n        const localBashFilePath = Path.resolve(__dirname, '.backupServer.sh');\n        const _this = this;\n        let toPrint;\n        return Q.promise((rsvRoot, rejRoot) => {\n            (() => {\n                // eslint-disable-next-line no-sync\n                if(fs.existsSync(zipPath) && !preparedZipPath){ // 不删除同一批任务留下的压缩包\n                    return this.removeFilePromise (zipPath);\n                }else{\n                    return Q.resolve(null);\n                }\n            })().then(() => {\n                if(hdlUtil.oType(modifiedHours) === 'number'){\n                    if(preparedZipPath && fs.existsSync(zipPath)){ // 不重复制作压缩包\n                        return preparedTmpFolderPath;\n                    }\n                    return fsUtil.copyFilteredFilesPromise(srcFolderPath, modifiedHours);\n                }else{\n                    return;\n                }\n            }).then(feed => {\n                let thePath;\n                if(feed){\n                    thePath = tmpFolderPath = feed;\n                }else{\n                    thePath = srcFolderPath;\n                }\n                if(fs.existsSync(zipPath) && preparedZipPath){ // 不重复制作压缩包\n                    return;\n                }\n                return this.zipFolderHandler(thePath, { zipPath });\n            }).then(() => {\n                if(!privateKeyPath || !fs.existsSync(privateKeyPath)){\n                    if(password){\n                        return null;\n                    }else{\n                        return Q.reject({code: 110, msg: 'no password'});\n                    }\n                }\n                return Q.promise((rsv, rej) => {\n                    fs.readFile(privateKeyPath, 'utf8', (err, rst) => {\n                        if (err) {\n                            return rej(err);\n                        }\n                        rsv(rst);\n                    })\n                })\n            }).then(( feed ) => {\n                _this.ssh = new NodeSSH();\n                const sshOptions = {\n                    host,\n                    port,\n                    username\n                }\n                if(feed){\n                    sshOptions.privateKey = feed;\n                }else{\n                    sshOptions.password = password;\n                }\n                const sshOptionsCopy = { ...sshOptions };\n                delete sshOptionsCopy.privateKey;\n                toPrint = {host, port, username}\n                return _this.ssh.connect(sshOptions);\n            }).then(() => {\n                if(toPrint){\n                    console.log(hdlUtil.date2string(new Date(), 'ms'), 'SSH Login:', toPrint);\n                }\n                return Q.promise((rsv, rej) => {\n                    _this.ssh.putFile(zipPath, destFilePath).then(function () {\n                        rsv({ destFilePath, msg: 'OK', zipPath });\n                    }, function (error) {\n                        rej(error);\n                    })\n                })\n            /* }).then(function () {\n                return Q.promise((rsv, rej) => {\n                    _this.ssh.exec('ls', ['-l', zipFileName], {\n                        cwd: parentDestFolderPath,\n                        onStdout (chunk) {\n                            const str = chunk.toString('utf8');\n                            console.log('#108 stdoutChunk:', str)\n                            rsv(str)\n                        },\n                        onStderr (chunk) {\n                            const str = chunk.toString('utf8');\n                            console.log('#113 stderrChunk:', str)\n                            rej(str);\n                        }\n                    })\n                }) */\n            }).then(() => {\n                return this.getInitScriptPromise({leafFolderName, destFolderPath});\n            }).then(feed => {\n                return Q.promise((rsv, rej) => {\n                    fs.writeFile(localBashFilePath, feed, { encoding: 'utf8', mode: 0o644, flag: 'w' }, (err, rst) => {\n                        if(err){\n                            rej(err);\n                        }else{\n                            rsv(rst);\n                        }\n                    });\n                })\n            }).then(() => {\n                const remoteBashFilePath = `${parentDestFolderPath}${destPathSep}backupServer.sh`; // Path.resolve(parentDestFolderPath, 'backupServer.sh');\n                return Q.promise((rsv, rej) => {\n                    _this.ssh.putFile(localBashFilePath, remoteBashFilePath).then(function () {\n                        rsv({ destFilePath, msg: 'OK', zipPath });\n                    }, function (error) {\n                        rej(error);\n                    })\n                })\n            }).then(() => {\n                return _this.ssh.execCommand('chmod +x backupServer.sh', { cwd: parentDestFolderPath })\n            }).then(() => {\n                return _this.ssh.execCommand('./backupServer.sh', { cwd: parentDestFolderPath });\n            })/* .then(() => {\n                const qAll = [];\n                qAll.push( this.removeFilePromise(zipPath) );\n                qAll.push( this.removeFilePromise(localBashFilePath) );\n                return Q.all(qAll);\n            }) *//* .then(() => {\n                const deferred = Q.defer();\n                setTimeout(function(){deferred.resolve()}, 10000);\n                return deferred.promise;\n            }) *//* .then(() => {\n                if(!tmpFolderPath){\n                    return;\n                }\n                return Q.promise((rsv, rej) => {\n                    // delete directory recursively\n                    fs.rmdir(tmpFolderPath, { recursive: true }, (err) => {\n                        if (err) {\n                            rej(err);\n                        }else{\n                            console.log(`#268 ${tmpFolderPath} is deleted!`);\n                            rsv(null);\n                        }\n                    });\n                })\n            }) */.then(() => {\n                _this.ssh.dispose();\n                rsvRoot({code: 111, msg: 'OK', tmpFolderPath, localBashFilePath, zipPath});\n            }).done(null, err => {\n                if (!err) {\n                    return;\n                }\n                console.error('#75', err);\n                rsvRoot({code: 110, msg: 'ERROR'});\n            })\n        })\n    }\n\n}\nmodule.exports = Deploy;"],"file":"deploy.js"}