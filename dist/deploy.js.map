{"version":3,"sources":["deploy.js"],"names":["Deploy","args","mandatoryFields","mandatoryOneFields","fd","hdlUtil","getDeepVal","Error","isMandatoryOneOk","leafFolderName","initScript","Q","resolve","destFolderPath","author","promise","rsv","rej","bashFilePath","Path","__dirname","fs","readFile","err","rst","regex2","RegExp","replace","regex","filePath","existsSync","unlink","console","error","folderPath","options","_L","endsWith","sep","slice","length","zipPath","trim","code","srcFolderPath","privateKeyPath","host","port","username","password","lastSlashIdx","lastIndexOf","zipFileName","parentFolderPath","parentDestFolderPath","destFilePath","localBashFilePath","_this","removeFilePromise","then","zipFolderHandler","reject","msg","feed","ssh","NodeSSH","sshOptions","privateKey","sshOptionsCopy","connect","putFile","getInitScriptPromise","writeFile","encoding","mode","flag","remoteBashFilePath","execCommand","cwd","qAll","push","all","dispose","done","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable arrow-parens */\nimport Path from 'path'\nimport fs from 'fs'\nimport Q from 'q';\nimport zipFolder from 'zip-folder';\nimport _L from 'lodash';\nimport hdlUtil from './helpers/hdlUtil';\nimport { NodeSSH } from 'node-ssh'\n\nclass Deploy {\n    constructor (args = {}) {\n        const mandatoryFields = ['author', 'srcFolderPath', 'destFolderPath', 'host', 'username'];\n        const mandatoryOneFields = ['privateKeyPath', 'password']\n        // const optionalFields = ['initScript'];\n        for(let fd of mandatoryFields){\n            if(!hdlUtil.getDeepVal(args, fd)){\n                throw new Error(`mandatory field \"${fd}\" is missing`);\n            }\n        }\n        let isMandatoryOneOk = false; // 二选一\n        for(let fd of mandatoryOneFields){\n            if(hdlUtil.getDeepVal(args, fd)){\n                isMandatoryOneOk = true;\n                break;\n            }\n        }\n        if(!isMandatoryOneOk){\n            throw new Error(`mandatory field \"privateKeyPath / password\" is missing`);\n        }\n        this.args = args;\n    }\n\n    getInitScriptPromise (leafFolderName) {\n        if ( this.args.initScript ) {\n            return Q.resolve(this.args.initScript);\n        }\n        const destFolderPath = this.args.destFolderPath;\n        const author = this.args.author;\n        return Q.promise((rsv, rej) => {\n            const bashFilePath = Path.resolve(__dirname, 'helpers/backupServer.sh');\n            fs.readFile(bashFilePath, 'utf8', (err, rst) => {\n                if (err) {\n                    return rej(err);\n                }\n                if(author){\n                    const regex2 = new RegExp('改前');\n                    rst = rst.replace(regex2, `.${author}.backup`);\n                }\n                rst = rst.replace(/\\$\\{destFolderPath\\}/g, destFolderPath);\n                if(!leafFolderName || leafFolderName === 'server'){\n                    return rsv(rst);\n                }else{\n                    const regex = new RegExp('server', 'g');\n                    rst = rst.replace(regex, leafFolderName);\n                    rsv(rst);\n                }\n            })\n        })\n    }\n\n    removeFilePromise (filePath) {\n        return Q.promise((rsv/* , rej */) => {\n            // eslint-disable-next-line no-sync\n            if (!fs.existsSync(filePath)) {\n                return rsv(`removeFilePromise #111 not found: ${filePath}`);\n            }\n            fs.unlink(filePath, function (err) {\n                if (err) {\n                    console.error('removefilePromise #27', err);\n                }\n                rsv(filePath);\n            });\n        })\n    }\n    \n    /** \n     * @param {String} folderPath the path of folder to be zipped\n     * @param {String} options options.deleteFolder Y 压缩后删除文件 \n     * @returns {String} zipPath\n     * */\n    zipFolderHandler (folderPath, options = {}) {\n        if (_L.endsWith(folderPath, Path.sep)) {\n            folderPath = folderPath.slice(0, folderPath.length - 1);\n        }\n        const zipPath = _L.trim(hdlUtil.getDeepVal(options, 'zipPath') || `${folderPath}.zip`);\n        return Q.promise(function (rsv, rej) {\n            // eslint-disable-next-line no-sync\n            if (!fs.existsSync(folderPath)) {\n                return rsv({ code: 113 });\n            }\n            zipFolder(folderPath, zipPath, err => {\n                if (err) {\n                    rej(err)\n                } else {\n                    rsv({ code: 111, zipPath });\n                }\n            });\n        });\n    }\n\n    exec () {\n        const { srcFolderPath, destFolderPath, privateKeyPath, host, port = 22, username, password } = this.args;\n        let lastSlashIdx = srcFolderPath.lastIndexOf(Path.sep);\n        if (lastSlashIdx === srcFolderPath.length - 1) {\n            lastSlashIdx = srcFolderPath.slice(0, -1).lastIndexOf(Path.sep);\n        }\n\n        let leafFolderName = srcFolderPath.slice(lastSlashIdx + 1);\n        if(hdlUtil.endsWith(leafFolderName, Path.sep)){\n            leafFolderName = leafFolderName.slice(0, leafFolderName.length - 1);\n        }\n        const zipFileName = `${leafFolderName}.zip`;\n\n        const parentFolderPath = srcFolderPath.slice(0, lastSlashIdx);\n        const zipPath = Path.resolve(parentFolderPath, zipFileName);\n\n        lastSlashIdx = destFolderPath.lastIndexOf(Path.sep);\n        if (lastSlashIdx === destFolderPath.length - 1) {\n            lastSlashIdx = destFolderPath.slice(0, -1).lastIndexOf(Path.sep);\n        }\n        const parentDestFolderPath = destFolderPath.slice(0, lastSlashIdx);\n        const destFilePath = Path.resolve(parentDestFolderPath, zipFileName);\n        const localBashFilePath = Path.resolve(__dirname, '.backupServer.sh');\n        const _this = this;\n        (() => {\n            // eslint-disable-next-line no-sync\n            if(fs.existsSync(zipPath)){\n                return this.removeFilePromise (zipPath);\n            }else{\n                return Q.resolve(null);\n            }\n        })().then(() => {\n            return this.zipFolderHandler(srcFolderPath, { zipPath });\n        }).then(() => {\n            if(!privateKeyPath || !fs.existsSync(privateKeyPath)){\n                if(password){\n                    return null;\n                }else{\n                    return Q.reject({code: 110, msg: 'no password'});\n                }\n            }\n            return Q.promise((rsv, rej) => {\n                fs.readFile(privateKeyPath, 'utf8', (err, rst) => {\n                    if (err) {\n                        return rej(err);\n                    }\n                    rsv(rst);\n                })\n            })\n        }).then(( feed ) => {\n            _this.ssh = new NodeSSH();\n            const sshOptions = {\n                host,\n                port,\n                username\n            }\n            if(feed){\n                sshOptions.privateKey = feed;\n            }else{\n                sshOptions.password = password;\n            }\n            const sshOptionsCopy = { ...sshOptions };\n            delete sshOptionsCopy.privateKey;\n            return _this.ssh.connect(sshOptions);\n        }).then(() => {\n            return Q.promise((rsv, rej) => {\n                _this.ssh.putFile(zipPath, destFilePath).then(function () {\n                    rsv({ destFilePath, msg: 'OK', zipPath });\n                }, function (error) {\n                    rej(error);\n                })\n            })\n        /* }).then(function () {\n            return Q.promise((rsv, rej) => {\n                _this.ssh.exec('ls', ['-l', zipFileName], {\n                    cwd: parentDestFolderPath,\n                    onStdout (chunk) {\n                        const str = chunk.toString('utf8');\n                        console.log('#108 stdoutChunk:', str)\n                        rsv(str)\n                    },\n                    onStderr (chunk) {\n                        const str = chunk.toString('utf8');\n                        console.log('#113 stderrChunk:', str)\n                        rej(str);\n                    }\n                })\n            }) */\n        }).then(() => {\n            return this.getInitScriptPromise(leafFolderName);\n        }).then(feed => {\n            return Q.promise((rsv, rej) => {\n                fs.writeFile(localBashFilePath, feed, { encoding: 'utf8', mode: 0o644, flag: 'w' }, (err, rst) => {\n                    if(err){\n                        rej(err);\n                    }else{\n                        rsv(rst);\n                    }\n                });\n            })\n        }).then(() => {\n            const remoteBashFilePath = Path.resolve(parentDestFolderPath, 'backupServer.sh');\n            return Q.promise((rsv, rej) => {\n                _this.ssh.putFile(localBashFilePath, remoteBashFilePath).then(function () {\n                    rsv({ destFilePath, msg: 'OK', zipPath });\n                }, function (error) {\n                    rej(error);\n                })\n            })\n        }).then(() => {\n            return _this.ssh.execCommand('chmod +x backupServer.sh', { cwd: parentDestFolderPath })\n        }).then(() => {\n            return _this.ssh.execCommand('./backupServer.sh', { cwd: parentDestFolderPath });\n        }).then(() => {\n            const qAll = [];\n            qAll.push( this.removeFilePromise(zipPath) );\n            qAll.push( this.removeFilePromise(localBashFilePath) );\n            return Q.all(qAll);\n        })/* .then(() => {\n            const deferred = Q.defer();\n            setTimeout(function(){deferred.resolve()}, 10000);\n            return deferred.promise;\n        }) */.then(() => {\n            _this.ssh.dispose();\n        }).done(null, err => {\n            if (!err) {\n                return;\n            }\n            console.error('#75', err);\n        })\n    }\n\n}\nmodule.exports = Deploy;"],"file":"deploy.js"}